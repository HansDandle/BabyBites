rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Authenticated users can create their own user document (on registration).
    // - Authenticated users can read and update their own user document.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid != null; // Allow creation for any authenticated user
    }

    // Children collection:
    // - Authenticated users can create new child documents.
    // - Authenticated users can read/update child documents if they are listed in the 'managers' array.
    match /children/{childId} {
      allow create: if request.auth.uid != null;
      allow read, update: if request.auth.uid in resource.data.managers;
    }

    // Feedings collection:
    // - Authenticated users can create new feeding records for children they manage.
    // - Authenticated users can read feeding records for children they manage.
    match /feedings/{feedingId} {
      allow create: if request.auth.uid != null && get(/databases/$(database)/documents/children/$(request.resource.data.childId)).data.managers.hasAny([request.auth.uid]);
      allow read: if request.auth.uid != null && get(/databases/$(database)/documents/children/$(resource.data.childId)).data.managers.hasAny([request.auth.uid]);
    }

    // Invitations collection:
    // - Authenticated users can create invitations.
    // - Authenticated users can read invitations where their email is the inviteeEmail.
    // - Authenticated users can update invitations (e.g., accept/decline) if they are the invitee.
    match /invitations/{invitationId} {
      allow create: if request.auth.uid != null;
      allow read: if request.auth.uid != null && request.auth.token.email == resource.data.inviteeEmail;
      allow update: if request.auth.uid != null && request.auth.token.email == resource.data.inviteeEmail;
    }
  }
}
